[Me]
ClassName|窗体类名
Caption|窗体标题
BackColor|窗体背景颜色
Style|样式
ExStyle|扩展样式
CurrentHwnd|当前句柄
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
WindowPos|当前窗体位置
hDC|设备上下文句柄
CurrentX|当前窗体文本输出的X轴坐标
CurrentY|当前窗体文本输出的Y轴坐标
hInstance|当前程序实例句柄
Create|创建窗体。请在主程序入口调用该过程。|HWND Create(HINSTANCE mHinstance)|mHinstance: 由主程序传入的实例句柄（hInstance）
Close|正常关闭窗体|void Close()
Destroy|强行关闭窗体|void Destroy()
SetCaption|设置窗体标题|void SetCaption(char* NewCaption)|void SetCaption(int NewCaption)|NewCaption: 新的标题字符串或者数字
SetBackColor|设置背景颜色|void SetBackColor(COLORREF NewColor)|NewColor: 新的颜色
SetVisible|设置窗口是否可视|void SetVisible(bool IsVisible)|IsVisible: 窗体是否可视
SetEnabled|设置窗口是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
SetFont|设置窗体的字体样式|void SetFont(int FontSize, int FontBoldWidth, bool FontItalic, bool FontUnderline, bool FontStrikeOut, char* FontName)|参数: |FontSize: 文本大小|FontBoldWidth: 文本粗体程度|FontItalic: 是否为斜体|FontUnderline: 是否有下划线|FontStrikeOut: 是否有删除线|FontName: 字体名称
SetStyle|设置窗体的样式|void SetStyle(LONG StyleAdd, LONG StyleRemove)|StyleAdd: 添加的样式|StyleRemove: 去除的样式
SetForeColor|设置窗体文本颜色|void SetForeColor(COLORREF NewColor)|NewColor: 新的颜色
SetFontTransparent|设置窗体输出的文本是否透明。（适用于Print()）|void SetFontTransparent(bool bTransparent)|bTransparent: 是否透明
Move|更改窗体位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|参数: |NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
Print|以指定位置输出文本|void Print(char* TextPrint)|void Print(char* TextPrint, int X, int Y)|参数: |TextPrint: 需要输出的文本|X: 输出的X轴位置|Y: 输出的Y轴位置
Hide|隐藏窗体|void Hide()
Show|显示窗体|void Show()
SetTopMost|设置窗体最前端|void SetTopMost(bool bTopMost)|bTopMost: 是否最前端
SetTransparent|设置窗体透明|void SetTransparent(unsigned char Degree)|Degree: 窗体透明的程度，范围为0到255。255表示不透明；0表示完全透明。

[Timer]
ID|计时器ID
Interval|计时间隔
Enabled|计时器是否被激活
Create|创建计时器|bool Create()
Kill|删除计时器|void Kill()

[Image]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Create|创建图片控件|HWND Create()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Label]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
TextPos|文本位置
Caption|标签内容
BlackBorder|是否有黑色边框
BlackFilled|是否以黑色填充
AutoNextLine|是否自动换行
AutoEllipsis|是否自动添加省略号
Create|创建标签控件|HWND Create()
SetCaption|设置标签标题|void SetCaption(char* NewCaption)|void SetCaption(int NewCaption)|NewCaption: 用来设置为标题的字符串或者数字
SetTextPos|设置标签文本位置|void SetTextPos(int NewPos)|NewPos: 标签的文本位置
SetAutoNextLine|设置标签控件是否自动换行|void SetAutoNextLine(bool bAutoNextLine)|bAutoNextLine: 是否自动换行
SetAutoEllipsis|设置标签控件是否自动添加省略号|void SetAutoEllipsis(bool bAutoEllipsis)|bAutoEllipsis: 是否自动添加省略号
SetBlackFilled|设置标签控件是否以黑色填充|void SetBlackFilled(bool bBlackFilled)|bBlackFilled: 是否以黑色填充
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Edit]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Text|文本
AutoHScroll|自动水平滚动
AutoVScroll|自动垂直滚动
TextPos|文本位置
ForceLowercase|强制小写
ForceUppercase|强制大写
ForceNumber|强制数字
IsPassword|密码文本
PasswordChar|密码字符
ReadOnly|文本只读
BlackBorder|黑色边框
ClientEdgeBorder|立体边框
Multiline|多行文本
ScrollBars|滚动条
Create|创建文本控件|HWND Create()
SetText|设置文本框文本|void SetText(char* NewText)|void SetText(int NewText)|NewText: 新的文本
SetForceLowerCase|设置文本框是否强制要求小写|void SetForceLowerCase(bool bLowerCase)|bLowerCase: 是否强制要求小写
SetForceUpperCase|设置文本框是否强制要求大写|void SetForceUpperCase(bool bUpperCase)|bUpperCase: 是否强制要求大写
SetForceNumber|设置文本框是否强制要求数字|void SetForceNumber(bool bNumber)|bNumber: 是否强制要求数字
SetReadOnly|设置文本框是否文本只读|void SetReadOnly(bool bReadOnly)|bReadOnly: 是否文本只读
EmptyUndoBuffer|清空文本框的撤销缓存|void EmptyUndoBuffer()
GetFirstVisibleLine|获取文本框能看到的第一行|long GetFirstVisibleLine()
GetLimitText|获取文本限制范围|long GetLimitText()
SetLimitText|设置文本限制范围|void SetLimitText(long NewLimit)|NewLimit: 新的文本输入字数限制。如果为0则无限制。
GetLineCount|获取文本的行数|long GetLineCount()
SetLeftMargin|设置文本框的左边距|void SetLeftMargin(int NewMargin)|NewMargin: 新的左边距
SetRightMargin|设置文本框的右边距|void SetRightMargin(int NewMargin)|NewMargin: 新的右边距
GetLeftMargin|获取文本框的左边距|int GetLeftMargin()
GetRightMargin|获取文本框的右边距|int GetRightMargin()
SetPasswordChar|设置文本框的密码文本|void SetPasswordChar(char NewPasswordChar)|NewPasswordChar: 新的密码字符或者其Ascii码
GetPasswordChar|获取文本框的密码文本|char GetPasswordChar()
GetSelLength|获取文本框的选取文本长度|DWORD GetSelLength()
GetSelStart|获取文本框的选取文本开头|DWORD GetSelStart()
SetSel|设置文本框的选取文本长度|void SetSel(DWORD StartPos, DWORD EndPos)|如果StartPos为0，EndPos为-1，则文本全选；|如果StartPos为-1，则文本取消选择；|如果EndPos为-1，则文本选取范围是StartPos到文本末尾。
SetSelStart|设置文本框的光标位置|void SetSelStart(DWORD StartPos)|StartPos: 新的光标位置|如果StartPos为-1，则文本取消选择。
SetSelLength|设置文本框的选取范围|void SetSelLength(DWORD SelLength)|SelLength: 选取范围的长度|如果SelLength是-1则文本框的选取范围是当前光标所在位置到文本末尾。
GetLineLength|获取指定行的长度|long GetLineLength(long lnNumber)|lnNumber: 行号。如果为-1则返回未选取的文本长度。
HScroll|水平滚动指定数量的列数|bool HScroll(long CharCount)|CharCount: 水平滚动的列数|如果文本框是单行文本框则返回false，如果是多行文本框则返回true
VScroll|垂直滚动指定数量的行数|bool VScroll(long LineCount)|LineCount: 垂直滚动的行数|如果文本框是单行文本框则返回false，如果是多行文本框则返回true
SetSelText|把当前选择的文本替换成指定的字符串|void SetSelText(bool bCanUndo, char* NewText)|bCanUndo: 此操作是否可撤销|NewText: 新的文本
GetCurrLine|获取当前光标所在的行|long GetCurrLine()
GetCurrCol|获取当前光标所在的列|long GetCurrCol()
Copy|复制操作|void Copy()
Cut|剪切操作|void Cut()
Undo|撤销操作|void Undo()
Clear|清除选择的文本|void Clear()
Paste|粘贴操作|void Paste()
GetTextLength|获取文本长度|long GetTextLength()
ScrollToCaret|滚动到光标|void ScrollToCaret()
GetText|获取文本|char* GetText()
SetFocus|使文本框获取焦点|void SetFocus()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Frame]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Text|文本
TextPos|文本位置
SetText|设置组框的文本|void SetText(char* NewText)|void SetText(int NewText)|NewText: 新的文本
Click|模拟鼠标点击的操作|void Click()
GetText|获取文本|char* GetText()
Create|创建组框控件|HWND Create()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Button]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Text|文本
TextPos|文本位置
ClientEdgeBorder|立体边框
Flat|扁平
BlackBorder|黑色边框
SetText|设置按钮的文本|void SetText(char* NewText)|void SetText(int NewText)|NewText: 新的文本
Click|模拟鼠标点击的操作|void Click()
GetText|获取文本|char* GetText()
Create|创建按钮控件|HWND Create()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[CheckBox]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Text|文本
TextPos|文本位置
ClientEdgeBorder|立体边框
Flat|扁平
BlackBorder|黑色边框
SetText|设置多选框的文本|void SetText(char* NewText)|void SetText(int NewText)|NewText: 新的文本
Click|模拟鼠标点击的操作|void Click()
GetText|获取文本|char* GetText()
Create|创建多选框控件|HWND Create()
SetChecked|设置复选框的勾选状态|void SetChecked(bool bChecked)|bChecked: 是否勾选
GetChecked|获取复选框的勾选状态|bool GetChecked()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Option]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Text|文本
TextPos|文本位置
ClientEdgeBorder|立体边框
Flat|扁平
BlackBorder|黑色边框
SetText|设置单选框的文本|void SetText(char* NewText)|void SetText(int NewText)|NewText: 新的文本
Click|模拟鼠标点击的操作|void Click()
GetText|获取文本|char* GetText()
Create|创建单选框控件|HWND Create()
SetChecked|设置单选框的勾选状态|void SetChecked(bool bChecked)|bChecked: 是否勾选
GetChecked|获取单选框的勾选状态|bool GetChecked()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Combo]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
VerticalScrollBar|垂直滚动条
AutoHscroll|自动水平滚动
ForceLowerCase|强制小写
ForceUppercase|强制大写
DropDownStyle|列表样式
AutoSort|自动排列
Create|创建组合框控件|HWND Create()
AddItem|添加指定的文本到组合框中的指定位置|int AddItem(char* strAdd, int ListIndex = -1)|int AddItem(int strAdd, int ListIndex = -1)|strAdd: 需要添加的文本|ListIndex: 文本添加到的位置。如果是-1 则添加到组合框的末尾|如果添加成功则返回对应的列表序号，如果失败则返回CB_ERR (-1)
RemoveItem|删除指定序号的列表项|int RemoveItem(int ListIndex)|ListIndex: 指定的列表项序号|如果执行成功则返回列表中剩余的项目数，如果失败则返回CB_ERR (-1)
Clear|清空所有列表项|void Clear()
ListDirFiles|在组合框中列出指定目录的文件|int ListDirFiles(LPCTSTR FilePath, DWORD FileType = 0)|FilePath: 文件路径|FileType: 筛选的文件类型，为DDL_*的常数|如果执行成功则返回最后一个添加的列表项的序号，如果失败则返回CB_ERR (-1)，如果列表空间不足则返回CB_ERRSPACE (-2)
FindItem|在组合框中查找有指定文本的列表项|int FindItem(char* strFind, int StartIndex = -1, bool FullMatch = true)|StrFind: 需要查找的文本|StartIndex: 从哪个列表项开始查找。如果为-1则从头开始查找|FullMatch: 是否需要全字匹配。如果不是，则检测文本的开头是否包含查找的文本|如果执行成功则返回找到的列表项的序号，如果失败则返回CB_ERR (-1)
GetListCount|获取组合框中的项目数量|int GetListCount()
GetSelItem|获取组合框中当前选取的列表项|int GetSelItem()|返回值为当前选取的列表项序号。如果没有列表项被选取则返回CB_ERR (-1)
GetDroppedState|获取组合框的列表的下拉状态|bool GetDroppedState()|如果下拉列表可视则返回true
GetDroppedWidth|获取组合框的下拉列表的宽度|int GetDroppedWidth()
SetDroppedWidth|设置组合框的下拉列表的宽度|int SetDroppedWidth(int NewWidth)|NewWidth: 下拉列表新的宽度|如果执行成功则返回下拉列表新的宽度，如果执行失败则返回CB_ERR (-1)
GetEditSel|获取组合框中的文本框的选取范围|void GetEditSel(int* outSelStart, int* outSelEnd)|outSelStart: 用来存放得到的文本选取区域的开头|outSelEnd: 用来存放得到的文本选取区域的结尾
GetItemHeight|获取组合框中其中一个列表项的高度|int GetItemHeight()
GetListText|获取组合框中指定列表项的文本|char* GetListText(int ListIndex)
GetText|获取文本|char* GetText()
SetText|设置文本|void SetText(char* NewText)|void SetText(int NewText)|NewText: 新的文本
GetMinimumVisibleItems|获取组合框的下拉列表中最少可以看见的列表数|int GetMinimumVisibleItems()
GetFirstVisibleItem|获取组合框可视的第一个列表项的序号|int GetFirstVisibleItem()|如果函数执行成功则返回组合框的下拉列表中的第一个可视的列表项序号，如果失败则返回CB_ERR (-1)
SetLimitLength|设置文本框最长的文本长度|void SetLimitLength(int LimitLength)|LimitLength: 限制的长度，如果为0则为系统默认
SetSelItem|设置组合框选择的列表项|int SetSelItem(int ListIndex)|ListIndex: 列表项的序号，如果为-1则不选择任何列表项|int SetSelItem(char* ListText, int StartItem = -1)|ListText: 需要被选择的列表项的文本，系统会检测文本的开头是否包含查找的文本|StartItem: 开始搜索的列表项。如果是-1则从头开始查找|如果执行成功则返回选取的列表项的序号，如果执行失败则返回CB_ERR (-1)
SetSelText|设置组合框中文本框的选取范围|bool SetSelText(int SelStart, int SelEnd)|SelStart: 文本选取的开头。如果为-1则取消选取文本|SelEnd: 文本选取的结尾。如果为-1则文本选取的范围为SelStart到末尾|如果执行成功则返回TRUE，如果执行失败则返回CB_ERR (-1)
SetItemHeight|设置组合框的下拉列表中每一个列表项的高度|int SetItemHeight(int NewHeight)|NewHeight: 每个列表项新的高度|如果执行成功则返回列表项新的高度，如果执行失败则返回CB_ERR (-1)
SetMinimumVisibleItems|设置组合框的下拉列表每次至少显示的列表项数|bool SetMinimumVisibleItems(int ItemCount)|ItemCount: 至少显示的列表项数|如果执行成功则返回true
ScrollToItem|使指定的列表项能够被显示到组合框的下拉列表中|bool ScrollToItem(int ListIndex)|ListIndex: 需要显示在列表框中的项目|如果成功则返回true
ShowDropDownList|显示或者隐藏组合框的下拉列表|void ShowDropDownList(bool bShow)|bShow: 是否显示组合框的下拉列表
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[ListBox]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
VerticalScrollBar|垂直滚动条
MultiSelect|允许多选
MultiColumn|允许多列
ClientEdgeBorder|立体边框
BlackBorder|黑色边框
AutoSort|自动排列
Create|创建列表框控件|HWND Create()
AddItem|添加指定的文本到列表框中的指定位置|int AddItem(char* strAdd, int ListIndex = -1)|int AddItem(int strAdd, int ListIndex = -1)|strAdd: 需要添加的文本|ListIndex: 文本添加到的位置。如果是-1 则添加到组合框的末尾|如果添加成功则返回对应的列表序号，如果失败则返回LB_ERR (-1)
RemoveItem|删除指定序号的列表项|int RemoveItem(int ListIndex)|ListIndex: 指定的列表项序号|如果执行成功则返回列表中剩余的项目数，如果失败则返回LB_ERR (-1)
Clear|清空所有列表项|void Clear()
ListDirFiles|在列表框中列出指定目录的文件|int ListDirFiles(LPCTSTR FilePath, DWORD FileType = 0)|FilePath: 文件路径|FileType: 筛选的文件类型，为DDL_*的常数|如果执行成功则返回最后一个添加的列表项的序号，如果失败则返回CB_ERR (-1)，如果列表空间不足则返回LB_ERRSPACE (-2)
FindItem|在列表框中查找有指定文本的列表项|int FindItem(char* strFind, int StartIndex = -1, bool FullMatch = true)|StrFind: 需要查找的文本|StartIndex: 从哪个列表项开始查找。如果为-1则从头开始查找|FullMatch: 是否需要全字匹配。如果不是，则检测文本的开头是否包含查找的文本|如果执行成功则返回找到的列表项的序号，如果失败则返回LB_ERR (-1)
GetListCount|获取列表框中的项目数量|int GetListCount()
GetSelItem|获取列表框中当前选取的列表项|int GetSelItem()|返回值为当前选取的列表项序号。如果没有列表项被选取则返回LB_ERR (-1)
GetItemHeight|获取列表框中其中一个列表项的高度|int GetItemHeight()
GetListText|获取列表框中指定列表项的文本|char* GetListText(int ListIndex)|ListIndex: 指定的列表项序号
SetSelItem|设置列表框选择的列表项（不适用于多选列表框）|int SetSelItem(int ListIndex, bool bSelect = TRUE)|ListIndex: 列表项的序号，如果为-1则不选择任何列表项|bSelect: 是否选择此列表项。若为FALSE，则取消选取该列表项|如果执行成功则返回选取的列表项的序号，如果执行失败则返回LB_ERR (-1)
SetItemHeight|设置列表框的下拉列表中每一个列表项的高度|int SetItemHeight(int NewHeight)|NewHeight: 每个列表项新的高度|如果执行成功则返回列表项新的高度，如果执行失败则返回LB_ERR (-1)
ScrollToItem|使指定的列表项能够被显示到列表框中|bool ScrollToItem(int ListIndex)|ListIndex: 需要显示在列表框中的项目|如果成功则返回true
GetFirstItem|获得当列表项多项选择时的首个列表项（仅适用于多选列表框）|int GetFirstItem()|如果执行失败则返回LB_ERR (-1)
GetSelCount|获得当前多选的列表项数（仅适用于多选列表框）|int GetSelCount()|如果执行失败则返回LB_ERR (-1)
GetMultiSelItems|获取列表框当前多选的所有列表项（仅适用于多选列表框）|int GetMultiSelItems(int* intBuffer)|intBuffer：指向一个指针数组的指针。其定义一般为 int *intBuffer = new int[列表项数];|如果成功则往intBuffer中写入所有的列表项序号，如果执行失败则返回LB_ERR (-1)
GetFirstVisibleItem|获取列表框可视的第一个列表项的序号|int GetFirstVisibleItem()|如果函数执行成功则返回列表框的第一个可视的列表项序号，如果失败则返回LB_ERR (-1)
ItemFromPoint|获取列表框指定坐标对应的列表项|int ItemFromPoint(int X, int Y)|X、Y: 指定的坐标|返回对应的列表项的序号
SetSelItemRange|多项选择指定的列表项（仅适用于多选列表框）|bool SetSelItemRange(int ListIndexFrom, int ListIndexTo, bool bSelect = TRUE)|ListIndexFrom: 选择的列表项的范围的首个|ListIndexTo: 选择的列表项的范围的最后一个|bSelect: 若为TRUE则选取指定范围内的列表项，若为FALSE则不选取指定范围内的列表项|如果有错误发生则返回false
SetColumnWidth|设置列表框的每一列的宽度（仅适用于多列列表框）|void SetColumnWidth(int NewWidth)
SetFocus|让列表框获得焦点|void SetFocus()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[HScroll]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Min|最小值
Max|最大值
SmallChange|最小更改值
LargeChange|最大更改值
Create|创建滚动条控件|HWND Create()
GetValue|获得滚动条的值|int GetValue()
SetValue|设置滚动条的值|int SetValue(int Value)|如果执行成功则返回滚动条之前的值，如果执行失败则返回0
GetRange|获得滚动条范围|int GetRange(int* lpMin, int* lpMax)|lpMin, lpMax 分别为指向用来接收滚动条最小值和最大值的整数的指针|如果执行失败则返回0
SetRange|设置滚动条范围|int SetRange(int MinValue, int MaxValue)|MinValue, MaxValue 分别为滚动条新的最大值和最小值|如果执行失败则返回0
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[UpDown]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Min|最小值
Max|最大值
Accel|增加速度
HorzStyle|是否为水平样式
Create|创建调节按钮控件|HWND Create()
GetAccel|获取调节按钮的调节速度|int GetAccel()
SetAccel|设置调节按钮的调节速度|bool SetAccel(int Acceleration)|Acceleration: 新的调节速度|如果执行成功则返回TRUE
GetPos|获取调节按钮的值|int GetPos()
SetPos|设置调节按钮的值|int SetPos(int NewPos)|NewPos: 新的值|返回调节按钮之前的值
GetRange|获取调节按钮的范围|void GetRange(int* lpMin, int* lpMax)|lpMin, lpMax 分别为指向用来接收调节按钮最小值和最大值的整数的指针
SetRange|设置调节按钮的范围|void SetRange(int Min, int Max)|Min, Max 分别为调节按钮新的最小值和最大值
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[ProgressBar]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Min|最小值
Max|最大值
Smooth|是否平滑样式
VertStyle|是否为垂直样式
BarColor|滑块颜色
BackColor|背景颜色
Create|创建进度条控件|HWND Create()
IncreaseValue|令进度条增加指定的值|int IncreaseValue(int ValueAdd)|ValueAdd: 进度条增加的值|返回进度条之前的值
GetBarColor|获取滑块颜色|COLORREF GetBarColor()
SetBarColor|设置滑块的颜色|COLORREF SetBarColor(COLORREF NewColor)|NewColor: 新的滑块颜色。|返回进度条之前的滑块颜色
GetBackColor|获取背景颜色|COLORREF GetBackColor()
SetBackColor|设置背景颜色|COLORREF SetBackColor(COLORREF NewColor)|NewColor: 新的背景颜色。若为CLR_DEFAULT (0xFF000000L)，则使用系统默认的颜色。|返回进度条之前的背景颜色
GetValue|获取进度条的值|int GetValue()
SetValue|设置进度条的值|int SetValue(int NewValue)|NewValue: 新的值。若该值超出进度条的范围系统则会设置为最接近的有效值。|返回之前的值
GetMin|获取进度条的最小值|int GetMin()
GetMax|获取进度条的最大值|int GetMax()
GetRange|获取进度条的范围|void GetRange(int* lpMin, int* lpMax)|lpMin, lpMax 分别为指向用来接收进度条最小值和最大值的整数的指针
SetRange|设置进度条范围|DWORD SetRange(int MinValue, int MaxValue)|MinValue, MaxValue 分别为进度条新的最大值和最小值|返回一个LOWORD中装有之前的最小值，HIWORD中装有之前的最大值的整数
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Slider]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Direction|方向。若为true则为水平，若为false则为垂直
MarkPosition|刻度位置。0~5分别为左边、右边、上方、下方、都有、无刻度
NoBar|是否不显示滑块
TooltipPos|数字标签位置0-4分别为左边、右边、上方、下方、无数字标签
TickFreq|刻度间隔
Min|最小值
Max|最大值
SmallChange|慢速更改步长
LargeChange|快速更改步长
BlackBorder|黑色边框
Create|创建滑块控件|HWND Create()
SetToolTipPos|设置滑块的数字标签位置|void SetToolTipPos(int NewPos)|NewPos: 数字标签位置0-3分别为左边、右边、上方、下方
SetTickFreq|设置滑块的刻度间隔|void SetTickFreq(int NewTickFreq)|NewTickFreq: 新的刻度间隔
SetMax|设置滑块的最大值|void SetMax(int NewMax)|NewMax: 新的最大值
SetMin|设置滑块的最小值|void SetMin(int NewMin)|NewMin: 新的最小值
SetRange|设置滑块的范围|void SetRange(int NewMax, int NewMin)|NewMax: 新的最大值|NewMin: 新的最小值
GetMax|获取滑块的最大值|int GetMax()
GetMin|获取滑块的最小值|int GetMin()
SetSmallChange|设置滑块的慢速更改步长|void SetSmallChange(int NewSmallChange)|NewSmallChange: 新的慢速更改步长
SetLargeChange|设置滑块的快速更改步长|void SetLargeChange(int NewLargeChange)|NewLargeChange: 新的快速更改步长
SetPos|设置滑块位置|void SetPos(int NewPos)|NewPos: 新的滑块位置
GetPos|获取滑块位置|int GetPos()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Hotkey]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Create|创建热键控件|HWND Create()
SetHotkey|设置热键控件的热键|void SetHotkey(BYTE KeyCode, BYTE KeyModifier)|KeyCode: 指定的键盘按键|KeyModifier: 指定的键盘功能键。Shift = 1; Ctrl = 2; Alt = 4
GetHotKey|获取热键控件的热键|void GetHotKey(LPBYTE KeyCode, LPBYTE KeyModifier)|lpKeyCode: 用来接收键盘按键的变量的指针|lpKeyModifier: 用来接收键盘功能键的变量的指针
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[ListView]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Style|样式。0-3分别为图标、列表、报告、小图标
Sort|自动排序模式。0-2分别为递增、递减、不排序
Align|自动对齐。0-2分别为左对齐、顶端对齐、自动
EditableLabel|标签是否可编辑
MultiSelectItems|是否可以多选
BlackBorder|黑色边框
Create|创建热键控件|HWND Create()
AddColumn|添加列表头到列表视图中|void AddColumn(char* ColumnText, int Width, int Index = 0, int Position = LVCFMT_LEFT)|ColumnText: 列表头文本|Width: 列表头宽度|Index: 列表头序号|Position: 列表头文本对齐位置，可以为LVCFMT_*的常数
AddItem|添加列表项到列表视图中|int AddItem(char* ItemText)|ItemText: 新添加的列表项的文本|若执行成功则返回新加的列表项的序号，若失败则返回-1
SetItemText|更改列表项的文本|void SetItemText(char* ItemText, int ListIndex, int SubItemIndex = 0)|ItemText: 新的列表文本|ListIndex: 需要更改的列表项的序号|SubItemIndex: 需要更改的子列表项的序号
GetItemText|获取列表项文本|char* GetItemText(int ListIndex, int SubItemIndex = 0)|Index: 指定列表项的序号|SubItemIndex: 指定子列表项的序号
GetItemCount|获取列表项数量|int GetItemCount()
GetColumnText|获取指定列表头的文本|char* GetColumnText(int Index)|Index: 指定列表头的序号
GetColumnWidth|获取指定列表头的宽度|int GetColumnWidth(int Index)|Index: 指定列表头的序号
SetColumnText|设置指定列表头的文本|bool SetColumnText(int Index, char* NewText)|Index: 指定列表头的序号|NewText: 新的文本|若执行成功则返回TRUE
SetColumnWidth|设置指定列表头的宽度|bool SetColumnWidth(int Index, int NewWidth)|Index: 列表头的序号|NewWidth: 新的宽度|若执行成功则返回TRUE
EditLabel|进入标签编辑操作|int EditLabel(int Index)|Index: 需要编辑标签的列表项序号。若为-1，则取消编辑|若执行失败，返回值为0
CancelEditLabel|退出标签编辑操作|void CancelEditLabel()
DeleteAllItems|删除所有的列表项|void DeleteAllItems()
DeleteColumn|删除指定的列表头|bool DeleteColumn(int Index)|Index: 列表头的序号
DeleteItem|删除指定的列表项|bool DeleteItem(int Index)|Index: 列表项的序号
EnsureVisible|确保指定的列表项可视|bool EnsureVisible(int Index)|Index: 列表项的序号
FindItem|按照指定的文本查找列表项|int FindItem(char* ItemText, bool FullMatch, int StartIndex = -1)|ItemText: 指定列表项的文本|AllMatch: 字符串是否必须完全相同。若为FALSE，若列表项开头包含查找的字符串也可接受|StartIndex: 从指定的列表项开始查找。默认为从头开始查找|返回找到的列表项的序号。如果失败则返回-1
ItemFromXY|按照指定的坐标查找列表项，仅适用于图标样式|int ItemFromXY(int X, int Y)|X: X坐标值|Y: Y坐标值|返回找到的列表项的序号。如果失败则返回-1
SetBackColor|设置列表视图的背景颜色|bool SetBackColor(COLORREF Color)|Color: 新的颜色。若为CLR_NONE则使用系统默认的颜色|若执行成功则返回TRUE
SetTextBackColor|设置列表视图的文本背景颜色|bool SetTextBackColor(COLORREF Color)|Color: 新的颜色。若为CLR_NONE则使用系统默认的颜色|若执行成功则返回TRUE
SetTextColor|设置列表视图的文本颜色|bool SetTextColor(COLORREF Color)|Color: 新的颜色|若执行成功则返回TRUE
GetBackColor|获取列表视图的背景颜色|COLORREF GetBackColor()|返回背景颜色值
GetTextBackColor|获取列表视图的文本背景颜色|COLORREF GetTextBackColor()|返回文本背景颜色值
GetTextColor|获取列表视图的文本颜色|COLORREF GetTextColor()|返回文本颜色值
Scroll|滚动列表视图|bool Scroll(int vScroll, int hScroll = 0)|vScroll: 垂直滚动的距离|hScroll: 水平滚动的距离|若执行成功则返回TRUE
SetItemPosition|设置图标位置（仅适用于图标视图）|void SetItemPosition(int ListIndex, int X, int Y)|ListIndex: 列表项序号|X, Y: 图标的坐标
GetItemPosotion|获取图标位置|bool GetItemPosotion(int ListIndex, long* pX, long* pY)|ListIndex: 列表项序号|pX, pY: 指向用来接收图标坐标的指针|返回值：若成功则返回TRUE
GetSelectedColumn|获取当前选择的列表头|int GetSelectedColumn()
GetTopIndex|获取最顶端的列表项。仅适用于列表视图|int GetTopIndex()|若执行成功则返回最顶端的列表项的序号，否则返回0
SetStyle|设置ListView的视图|int SetStyle(int Style)|Style: 样式。0-3分别为图标、列表、报告、小图标|返回值：若执行成功，则返回1；否则返回-1
GetSelectedItem|获取当前选择的列表项序号。若没有选择列表项，则返回-1|int GetSelectedItem()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[TreeView]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
EditableLabels|标签是否可编辑
HasButtons|是否显示节点按钮
RootHasButtons|根节点是否显示按钮
HasLines|是否显示树线
NoHscroll|是否禁止水平滚动
NoVHscroll|是否禁止水平和垂直滚动
ShowSelAlways|失焦时是否显示选择项
HotTracking|是否实时选取
CheckBoxes|是否有多选框
BlackBorder|是否有黑色边框
Create|创建树视图控件|HWND Create()
AddItem|添加项目到树视图中|HTREEITEM AddItem(char* ItemText, HTREEITEM Parent = 0)|ItemText: 项目的文本|Parent: 父节点的句柄|返回值: 创建的项目的句柄
RemoveItem|删除指定的项目|bool RemoveItem(HTREEITEM Item)|Item: 需要删除项目的句柄。若需要删除所有的项目，这个参数设置为NULL|返回值: 若删除成功则返回TRUE，否则返回FALSE
EnsureVisible|确保指定的项目可视|void EnsureVisible(HTREEITEM Item)|Item: 指定的项目的句柄
ExpandItems|展开或者收缩树状图|bool ExpandItems(HTREEITEM Item, int Mode)|Item: 需要被展开或者收缩的列表项|Mode: 展开或者收缩。1: 收缩；2: 展开；3: 切换展开或者收缩
EditLabel|开始编辑文本|bool EditLabel(HTREEITEM Item)|Item: 需要编辑文本的项目的句柄
EndEditLabel|取消编辑文本|bool EndEditLabel(bool SaveChanges)|SaveChanges: 是否保存对项目的修改|返回值: 若执行成功返回TRUE，否则返回FALSE
GetTextColor|获取文本颜色|COLORREF GetTextColor()|返回值: 颜色值。若为-1，则代表使用系统默认颜色
GetLineColor|获取线条颜色|COLORREF GetLineColor()|返回值: 颜色值。若为-1，则代表使用系统默认颜色
GetBackColor|获取背景颜色|COLORREF GetBackColor()|返回值: 颜色值。若为-1，则代表使用系统默认颜色
SetTextColor|设置文本颜色|COLORREF SetTextColor()|Color: 新的颜色。若为-1，则代表使用系统默认颜色|返回值: 之前的颜色值。若为-1，则代表使用系统默认颜色
SetBackColor|设置背景颜色|COLORREF SetBackColor()|Color: 新的颜色。若为-1，则代表使用系统默认颜色|返回值: 之前的颜色值。若为-1，则代表使用系统默认颜色
SetLineColor|设置线条颜色|COLORREF SetLineColor()|Color: 新的颜色。若为-1，则代表使用系统默认颜色|返回值: 之前的颜色值。若为-1，则代表使用系统默认颜色
GetListCount|获取列表项的数量|int GetListCount()
GetItemHeight|获取列表项的高度|int GetItemHeight()
SetItemHeight|设置列表项的高度|int SetItemHeight(int Height)|Height: 新的高度。若为-1则使用系统默认高度|返回值: 之前的列表项高度
GetItemText|获取指定列表项的文本|char* GetItemText(HTREEITEM Item)|Item: 列表项的句柄|返回值: 指定列表项的文本
SetItemText|设置指定列表项的文本|bool SetItemText(HTREEITEM Item, char* NewText)|Item: 列表项的句柄|NewText: 新的文本|若执行成功则返回TRUE
GetSelectedItem|获取当前选择的项目句柄|HTREEITEM GetSelectedItem()|若没有选择项目或选择的项目无效，则返回0
GetParentItem|获取指定列表项的根节点句柄|HTREEITEM GetParentItem(HTREEITEM Item)|Item: 指定的列表项的句柄|若没有选择项目或选择的项目无效，则返回0
GetPreviousItem|获取指定列表项的上一个可视的列表项的句柄|HTREEITEM GetPreviousItem(HTREEITEM Item)|Item: 指定的列表项的句柄|若没有选择项目或选择的项目无效，则返回0
GetNextItem|获取指定列表项的下一个可视的列表项的句柄|HTREEITEM GetNextItem(HTREEITEM Item)|Item: 指定的列表项的句柄|若没有选择项目或选择的项目无效，则返回0
SelectItem|选择指定的列表项目|bool SelectItem(HTREEITEM Item)|Item: 指定的列表项的句柄。若要取消选择则为NULL|若执行成功返回TRUE
GetVisibleCount|获取当前可视的项目的数量|int GetVisibleCount()
SetIndent|设置列表的缩进大小|void SetIndent(int NewWidth)|NewWidth: 新的缩进大小。若小于系统最小值则设置为系统最小值
GetIndent|获取列表的缩进大小|int GetIndent()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Tab]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
BottomTabs|选项卡在底部
ButtonLike|按钮样式
FlatButtons|扁平按钮
FixedWidth|选项卡统一大小
FocusOnButtons|按钮显示焦点
ForceLabelLeft|文本左对齐
HotTracking|实时选取
MultiLine|多行选项卡
ScrollOpposite|选项卡自动反向
Vertical|垂直样式
Create|创建选项卡控件|HWND Create()
DeleteAllItems|删除所有的选项卡|bool DeleteAllItems()
DeleteItem|删除指定的选项卡|bool DeleteItem(int Index)|Index: 指定的选项卡序号
DeselectAll|取消选择选项卡|void DeselectAll(bool ExceptCurrSel)|ResetAll: 若为FALSE，取消选取所有的标签；若为TRUE，取消选取当前选择标签之外的标签
GetSel|获取当前选择的选项卡|int GetSel()|返回值: 当前选择的选项卡序号。若没有选择则返回-1
GetItemText|获取指定标签的文本|char* GetItemText(int Index)|返回值: 若执行成功返回TRUE，否则返回FALSE
GetItemCount|获取标签数量|int GetItemCount()|返回值: 标签数量
GetRowCount|获取一共多少行标签|int GetRowCount()|返回值: 标签的行数
HighLightItem|高亮指定标签|bool HighLightItem(int Index, bool HighLight)|Index: 指定标签的序号|HighLight: 是否高亮指定标签。若为TRUE，则高亮标签；若为FALSE，则恢复标签|若执行成功，返回TRUE；否则返回FALSE
HitTest|获取指定坐标处的标签序号|int HitTest(int X, int Y)|返回获取到的标签序号。若没有匹配的标签，返回-1。
InsertItem|添加标签到控件中|int InsertItem(char* Text, int Index = -1)|Text: 标签的文本|Index: 标签的序号
SetFocusIndex|设置获得焦点的标签|void SetFocusIndex(int Index)|Index: 需要获得焦点的标签
SetCurrIndex|设置当前选择的标签|int SetCurrIndex(int Index)|Index: 标签的序号|返回之前选择的标签的序号
SetItemText|设置标签文本|bool SetItemText(int Index, char* Text)|Index: 标签的序号|Text: 新的文本|若执行成功，返回TRUE；否则返回FALSE
SetItemSize|设置标签的大小|int SetItemSize(int Width, int Height)|Width: 标签的宽度|Height: 标签的高度|返回值: 低位是之前的宽度，高位是之前的高度
SetMinTabWidth|设置标签最小的大小|int SetMinTabWidth(int Width)|Width: 标签最小的大小。若为-1，则使用系统默认大小|返回值: 标签之前的最小大小
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[Animation]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
AutoPlay|自动播放
Center|视频居中播放
Transparent|视频背景透明
ClientEdge|立体边框
BlackBorder|黑色边框
Create|创建动画控件|HWND Create()
Stop|停止播放|bool Stop()|若执行成功返回true|若成功，返回true
Play|开始播放|bool Play(int ReplayTimes = -1, short FrameBegin = 0, short FrameEnd = -1)|ReplayTimes: 重复播放的次数。若为-1则代表一直重复|FrameBegin: 从指定的帧开始播放。若为0代表从头开始|FrameEnd: 播放到指定的帧。若为-1代表播放到末尾|若成功，返回true
Open|以文件名打开文件或以资源文件打开文件|bool Open(char* FileName)|或 bool Open(WORD ResID)|FileName: 视频文件路径|或 ResID: 资源文件号|若成功，返回true
IsPlaying|获取播放状态|bool IsPlaying()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[RichEdit]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Text|文本
AutoHScroll|自动水平滚动
AutoVScroll|自动垂直滚动
TextPos|文本位置
ForceNumber|强制数字
IsPassword|密码文本
ReadOnly|文本只读
BlackBorder|黑色边框
ClientEdgeBorder|立体边框
SunkenBorder|下沉的边框
Multiline|多行文本
ScrollBars|滚动条
DisableNoScroll|显示禁用的滚动条
NoIME|禁用输入法
SelectionBar|左边缘空白
Create|创建RTF文本框控件|HWND Create()
SetUrlDetect|设置文本框是否自动检测URL|bool SetUrlDetect(bool Enabled)|Enabled: 是否自动检测URL|若执行成功，函数返回true
CanPaste|检测当前文本框是否能进行粘贴操作|bool CanPaste()|若能进行操作，返回true
CanRedo|检测当前文本框是否能进行撤销操作|bool CanRedo()|若能进行操作，返回true
GetSelRange|获取文本框中选取文本的范围|void GetSelRange(int* lpMin, int* lpMax)|lpMin: 选取的开头|lpMax: 选取的末尾|若选取开头为0，选取末尾为-1，则说明全选
SetSelRange|设置文本框中选取文本的范围|int SetSelRange(int Min, int Max)|Min: 选取的开头|Max: 选取的末尾|若选取开头为0，选取末尾为-1，则说明全选|返回实际选取的字符数
SetLimitText|设置文本框可输入的最大字符数|void SetLimitText(int iCount)|iCount: 最大文本数。若为0，则使用系统默认
SearchText|在文本框中查找文本|int SearchText(char* Find, bool MatchCase = false, bool WholeWord = false, int Begin = 0, int End = -1)|Find: 需要查找的文本|MatchCase: 是否需要大小写匹配|WholeWord: 是否需要全字匹配|Begin: 开始搜索文本的位置|End: 结束搜索文本的位置|返回查找到的文本起始部分。若没有找到，则返回-1
GetCharFormat|获取当前选择的字符的格式|CHARFORMAT GetCharFormat()
SetCharFormat|设置当前选择的字符的格式|bool SetCharFormat(CHARFORMAT cf)
SetText|设置文本框文本|void SetText(char* NewText)|NewText: 新的文本或有效的数字表达式
GetText|获取文本|char* GetText()
Copy|复制操作|void Copy()
Cut|剪切操作|void Cut()
Undo|撤销操作|void Undo()
Redo|重复操作|void Redo()
Clear|清除选择的文本|void Clear()
Paste|粘贴操作|void Paste()
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[TimePicker]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
LongDateFormat|完整时间格式
RightAlign|在右边弹出日历
CheckBoxes|复选框样式
TimeFormat|时间选择器
UpDownButton|使用调节按钮
Create|创建日期时间选择器控件|HWND Create()
GetRange|获取可供选择的日期时间范围|void GetRange(SYSTEMTIME* lpMin, SYSTEMTIME* lpMax)|lpMin: 接收起始时间的SYSTEMTIME结构体指针|lpMax: 接收结束时间的SYSTEMTIME结构体指针
SetRange|设置可供选的日期时间范围|bool SetRange(SYSTEMTIME* Begin, SYSTEMTIME* End)|Begin: 起始时间的SYSTEMTIME结构体指针，若为NULL则不设置起始时间|End: 结束时间的SYSTEMTIME结构体指针，若为NULL则不设置结束时间|若执行成功，返回true
GetTime|获取当前控件所选择的时间|bool GetTime(SYSTEMTIME* Time)|Time: 用来接收选择的时间的SYSTEMTIME结构体指针|若执行成功，返回true
SetTime|设置当前控件所选择的时间|bool SetTime(SYSTEMTIME* Time)|Time: 用来设置选择的时间的SYSTEMTIME结构体指针。若为NULL，则不选择时间|若执行成功，返回true
SetFormat|设置日期时间格式|bool SetFormat(char* FormatString)|FormatString: 格式字符串。若为NULL，则使用系统默认格式|若执行成功，返回true
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[MonthCalendar]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
MultiSelect|连续选取
MultiSelectLimit|连续选取数量
WeekNumbers|显示第几周
NoTodayCircle|不圈选今天
NoToday|不显示今天
BlackBorder|黑色边框
ClientEdgeBorder|立体边框
Create|创建月历控件|HWND Create()
GetCurrentSel|获取当前日历选择的日期|SYSTEMTIME GetCurrentSel()
SetCurrentSel|设置当前选择的日期|bool SetCurrentSel(SYSTEMTIME* SelDate)|若执行成功，返回true
GetFirstDayOfWeek|获取一周中的第一天|int GetFirstDayOfWeek()|返回值是当前日历中一周的第一天，0代表星期一，1代表星期二，以此类推
SetFirstDatOfWeek|设置一周中的第一天|void SetFirstDatOfWeek(int NewDay)|NewDay: 一周中的第一天。0代表星期一，1代表星期二，以此类推
GetMaxSelCount|获取月历控件可以选择日期的最大数目|int GetMaxSelCount()
SetMaxSelCount|设置月历控件可以选择日期的最大数目|bool SetMaxSelCount(int MaxCount)|若执行成功，返回true
GetSelRange|获取选择的范围|bool GetSelRange(SYSTEMTIME* stBegin, SYSTEMTIME* stEnd)|stBegin: 选择的开始的日期|stEnd: 选择的结束的事件|若执行成功，返回true
SetSelRange|设置选择的范围|bool SetSelRange(SYSTEMTIME* stBegin, SYSTEMTIME* stEnd)|stBegin: 选择的开始的日期|stEnd: 选择的结束的事件|若执行成功，返回true
GetRange|获取允许选择日期的范围|void GetRange(SYSTEMTIME* stBegin, SYSTEMTIME* stEnd)|stBegin: 选择的开始的日期|stEnd: 选择的结束的事件
SetRange|设置允许选择日期的范围|bool SetRange(SYSTEMTIME* stBegin, SYSTEMTIME* stEnd)|stBegin: 选择的开始的日期|stEnd: 选择的结束的事件|若执行成功，返回true
GetToday|获取今天的日期|void SetToday(SYSTEMTIME NewDate)
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()

[IpAddress]
hMenu|控件的hMenu（唯一标识符）
Visible|可视
Enabled|激活
Left|水平位置
Top|垂直位置
Width|窗体宽度
Height|窗体高度
CurrentHwnd|当前控件的句柄
Move|更改控件位置|void Move(int NewLeft, int NewTop, int NewWidth, int NewHeight)|NewLeft: 新的X坐标|NewTop: 新的Y坐标|NewWidth: 新的宽度|NewHeight: 新的高度
SetVisible|设置控件是否可视|void SetVisible(bool bVisible)|bVisible: 控件是否可视
SetEnabled|设置控件是否禁用|void SetEnabled(bool IsEnabled)|IsEnabled: 是否启用窗体
Unload|删除控件|void Unload()
Create|地址控件|HWND Create()
Clear|清空IP地址|void Clear()
GetIpAddress|获取当前的IP地址|char* GetIpAddress()
IsBlank|判断当前控件是否为空|bool IsBlank()|若当前控件为空，则返回true
SetIpAddress|设置当前的IP地址|void SetIpAddress(BYTE Field0, BYTE Field1, BYTE Field2, BYTE Field3)|Field0 - 3: 分别对应IP地址的四个部分
SetFocus|让控件获取焦点|void SetFocus(int Field)|Field: 需要获取焦点的位置序号。其中0位最左方
SetRange|设置IP地址对应位置的限制|bool SetRange(int Field, int Min, int Max)|Field: 需要设置限制的位置序号。其中0位最左方|Min: 需要设置的下限值|Max: 需要设置的上限值|若执行成功，返回true