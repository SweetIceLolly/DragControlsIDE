	case 【RealhMenu】:
		switch (uMsg)
		{
		case WM_MOUSEMOVE:
			Slider_【hMenu】_MouseMove(wParam & ~(MK_CONTROL | MK_SHIFT),	//取得鼠标按键状态
				wParam & ~(wParam & ~(MK_CONTROL | MK_SHIFT)),				//取得系统功能键按键状态
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_LBUTTONDOWN:
			Slider_【hMenu】_MouseDown(1, GetShiftValue(),					//触发左键按下消息
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_RBUTTONDOWN:
			Slider_【hMenu】_MouseDown(2, GetShiftValue(), 					//触发右键按下消息
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_MBUTTONDOWN:
			Slider_【hMenu】_MouseDown(4, GetShiftValue(), 					//触发中键按下消息
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_LBUTTONUP:
			Slider_【hMenu】_MouseUp(1, GetShiftValue(),						//触发左键松开消息
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_RBUTTONUP:
			Slider_【hMenu】_MouseUp(2, GetShiftValue(), 					//触发右键松开消息
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_MBUTTONUP:
			Slider_【hMenu】_MouseUp(4, GetShiftValue(), 					//触发中键松开消息
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));				//取得鼠标坐标
			break;

		case WM_KEYDOWN:											//键盘按下按键
			Slider_【hMenu】_KeyDown(wParam, GetShiftValue(),						//获取Ascii码和系统功能键状态 
				(bool)((lParam >> 30) != 0));							//将lParam移30位以得到是否长按数据
			break;

		case WM_KEYUP:												//键盘松开按键
			Slider_【hMenu】_KeyUp(wParam, GetShiftValue());
			break;

		case WM_MOUSEWHEEL:
			CallWindowProc(PrevSliderProc, hWnd, uMsg, wParam, lParam);
			Slider_【hMenu】_MouseWheel(GET_WHEEL_DELTA_WPARAM(wParam),				//大于0是向上滚动 向下滚动反之
				GET_KEYSTATE_WPARAM(wParam) & ~(MK_CONTROL | MK_SHIFT),				//获取鼠标按键状态
				GET_KEYSTATE_WPARAM(wParam) & ~(wParam & ~(MK_CONTROL | MK_SHIFT)),		//获取系统功能键状态
				GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));
			return 0;
			break;

		case SBM_SETSCROLLINFO:										//滑块位置改变
			Slider_【hMenu】_Scroll((int)SendMessage(hWnd, TBM_GETPOS, 0, 0));	//获取滑块位置
			break;
		}
		break;